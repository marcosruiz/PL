/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  //static = true;
  Ignore_Case = true;}PARSER_BEGIN(ExprMin)package test2;public class ExprMin{  static int numero = 0;  private static void grabarLexema(int n, String lexema)  {    System.out.print(n + ".- " + lexema + "   ");  }  private static void grabarPosicion(int nL, int nC)  {    System.out.print("linea: " + nL + "   ");    System.out.println("columan: " + nC + "\n");  }  private static void grabarDatosPieza(int n, Token pieza)  {    grabarLexema(n, pieza.image);    grabarPosicion(pieza.beginLine, pieza.beginColumn);  }  public static void main(String args []) throws ParseException  {    ExprMin anLexSint = new ExprMin(System.in);    anLexSint.unaExpresion();    System.out.println("Analisis terminado:");    System.out.println("no se han hallado errores lexico-sintacticos");  }  private static void grabar(String nombre)  {    System.out.println(" - > " + nombre + "\n");  }}PARSER_END(ExprMin)void unaExpresion() :{  int nOper;}{  nOper = expresion() < EOF >  {    System.out.println("Cantidad de operadores = " + nOper);  }}int expresion() :{  grabar("Expresion");  int n, i;}{  n = termino()  (    "+"    {      n++;    }    i = termino()    {      n = n + i;    }  )*  {    return n;  }}int termino() :{  int nAst = 0;  grabar("Termino");  int n, i;}{ /* factor() ("*" factor())* */  n = factor()  (    "*"    {      nAst++;      n++;    }    i = factor()    {      n = n + i;    }  )*  {    if (nAst > 0) System.out.println("\n Asteriscos: " + nAst + "\n");    return n;  }}int factor() :{
  Token pieza;  int n;  grabar("Factor");}{  pieza = < constante >  {
    numero++; grabarDatosPieza(numero,pieza);     return 0;  }| pieza = < variable >  {
    numero++; grabarDatosPieza(numero,pieza);     return 0;  }| "(" n = expresion() ")"  {    return n;  }}TOKEN :{  < variable : [ "a"-"z" ] >}TOKEN :{  < constante : ([ "0"-"9" ])+ >}SKIP :{  " "| "\t"| "\n"| "\r"}
