/* Generated By:JavaCC: Do not edit this line. AnsiC.java */
package ansic;

//------------------------------------------------------------------//
//                        COPYRIGHT NOTICE                          //
//------------------------------------------------------------------//
// Copyright (c) 2014, Francisco Javier Fabra Caro                  //
// All rights reserved.                                             //
//                                                                  //
// Redistribution and use in source and binary forms, with or       //
// without modification, are permitted provided that the following  //
// conditions are met:                                              //
//                                                                  //
// * Redistributions of source code must retain the above copyright //
//   notice, this list of conditions and the following disclaimer.  // 
//                                                                  //
// * Redistributions in binary form must reproduce the above        // 
//   copyright notice, this list of conditions and the following    // 
//   disclaimer in the documentation and/or other materials         // 
//   provided with the distribution.                                //
//                                                                  //
// * Neither the name of the University of Huelva nor the names of  //
//   its contributors may be used to endorse or promote products    //
//   derived from this software without specific prior written      // 
//   permission.                                                    //
//                                                                  //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND           // 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,      // 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF         // 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE         // 
// DISCLAIMED. IN NO EVENT SHALL THE COPRIGHT OWNER OR CONTRIBUTORS //
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,         // 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED  //
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    //
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   // 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          //
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING   //
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF   //
// THE POSSIBILITY OF SUCH DAMAGE.                                  //
//------------------------------------------------------------------//

//------------------------------------------------------------------//
//                      Universidad de Zaragoza                     //
//       Departamento de Informática e Ingeniería de Sistemas       //
//             Área de Lenguajes y Sistemas Informáticos            //
//------------------------------------------------------------------//
//                     PROCESADORES DE LENGUAJE                     //
//------------------------------------------------------------------//
//                                                                  //
//          Compilador de macros de Ansi C                          //
//                                                                  //
//------------------------------------------------------------------//


import java.io.*;

/**
 * Analizador léxico de C con tratamiento de las macros "#define", "#ifdef", "#ifndef" y "#endif".
 * Para ejecutarlo es necesario el comando "java AnsiC fichero.c"
 */
public class AnsiC implements AnsiCConstants {
   public static void main(String args[]) {
      if(args.length == 0) {
                System.out.println("Uso: java AnsiC fichero.c");
                System.exit(0);
        }

      try {
        AnsiC parser = new AnsiC(new FileInputStream(args[0]));
        parser.entrada();
      } catch(Exception ex) {
        System.out.println(ex);
        }
   }

/* Especificación sintáctica */
  static final public void entrada() throws ParseException {
  Token tk;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CONTINUE:
      case VOLATILE:
      case REGISTER:
      case UNSIGNED:
      case TYPEDEF:
      case DFLT:
      case DOUBLE:
      case SIZEOF:
      case SWITCH:
      case RETURN:
      case EXTERN:
      case STRUCT:
      case STATIC:
      case SIGNED:
      case WHILE:
      case BREAK:
      case UNION:
      case CONST:
      case FLOAT:
      case SHORT:
      case ELSE:
      case CASE:
      case LONG:
      case ENUM:
      case AUTO:
      case VOID:
      case CHAR:
      case GOTO:
      case FOR:
      case INT:
      case IF:
      case DO:
      case IDENTIFIER:
      case SEMICOLON:
      case LBRACE:
      case RBRACE:
      case COMMA:
      case COLON:
      case LPAREN:
      case RPAREN:
      case LBRACKET:
      case RBRACKET:
      case STAR:
      case DOTS:
      case EQ:
      case STAR_EQ:
      case SLASH_EQ:
      case PERCENT_EQ:
      case PLUS_EQ:
      case MINUS_EQ:
      case SM_SM_EQ:
      case GR_GR_EQ:
      case AND_EQ:
      case OVER_EQ:
      case OR_EQ:
      case HOOK:
      case OR_OR:
      case AND_AND:
      case OR:
      case AND:
      case OVER:
      case EQ_EQ:
      case NOT_EQ:
      case SM:
      case GR:
      case SM_EQ:
      case GR_EQ:
      case SM_SM:
      case GR_GR:
      case PLUS:
      case MINUS:
      case SLASH:
      case PERCENT:
      case PLUS_PLUS:
      case MINUS_MINUS:
      case COMP:
      case NOT:
      case DOT:
      case ARROW:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      tk = token();
                   System.out.println("["+tk.beginLine+","+tk.beginColumn+"] "+tk.image);
    }
    jj_consume_token(0);
  }

  static final public Token token() throws ParseException {
  Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      tk = jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      tk = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      tk = jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      tk = jj_consume_token(STRING_LITERAL);
      break;
    case CONTINUE:
      tk = jj_consume_token(CONTINUE);
      break;
    case VOLATILE:
      tk = jj_consume_token(VOLATILE);
      break;
    case REGISTER:
      tk = jj_consume_token(REGISTER);
      break;
    case UNSIGNED:
      tk = jj_consume_token(UNSIGNED);
      break;
    case TYPEDEF:
      tk = jj_consume_token(TYPEDEF);
      break;
    case DFLT:
      tk = jj_consume_token(DFLT);
      break;
    case DOUBLE:
      tk = jj_consume_token(DOUBLE);
      break;
    case SIZEOF:
      tk = jj_consume_token(SIZEOF);
      break;
    case SWITCH:
      tk = jj_consume_token(SWITCH);
      break;
    case RETURN:
      tk = jj_consume_token(RETURN);
      break;
    case EXTERN:
      tk = jj_consume_token(EXTERN);
      break;
    case STRUCT:
      tk = jj_consume_token(STRUCT);
      break;
    case STATIC:
      tk = jj_consume_token(STATIC);
      break;
    case SIGNED:
      tk = jj_consume_token(SIGNED);
      break;
    case WHILE:
      tk = jj_consume_token(WHILE);
      break;
    case BREAK:
      tk = jj_consume_token(BREAK);
      break;
    case UNION:
      tk = jj_consume_token(UNION);
      break;
    case CONST:
      tk = jj_consume_token(CONST);
      break;
    case FLOAT:
      tk = jj_consume_token(FLOAT);
      break;
    case SHORT:
      tk = jj_consume_token(SHORT);
      break;
    case ELSE:
      tk = jj_consume_token(ELSE);
      break;
    case CASE:
      tk = jj_consume_token(CASE);
      break;
    case LONG:
      tk = jj_consume_token(LONG);
      break;
    case ENUM:
      tk = jj_consume_token(ENUM);
      break;
    case AUTO:
      tk = jj_consume_token(AUTO);
      break;
    case VOID:
      tk = jj_consume_token(VOID);
      break;
    case CHAR:
      tk = jj_consume_token(CHAR);
      break;
    case GOTO:
      tk = jj_consume_token(GOTO);
      break;
    case FOR:
      tk = jj_consume_token(FOR);
      break;
    case INT:
      tk = jj_consume_token(INT);
      break;
    case IF:
      tk = jj_consume_token(IF);
      break;
    case DO:
      tk = jj_consume_token(DO);
      break;
    case IDENTIFIER:
      tk = jj_consume_token(IDENTIFIER);
      break;
    case SEMICOLON:
      tk = jj_consume_token(SEMICOLON);
      break;
    case LBRACE:
      tk = jj_consume_token(LBRACE);
      break;
    case RBRACE:
      tk = jj_consume_token(RBRACE);
      break;
    case COMMA:
      tk = jj_consume_token(COMMA);
      break;
    case COLON:
      tk = jj_consume_token(COLON);
      break;
    case LPAREN:
      tk = jj_consume_token(LPAREN);
      break;
    case RPAREN:
      tk = jj_consume_token(RPAREN);
      break;
    case LBRACKET:
      tk = jj_consume_token(LBRACKET);
      break;
    case RBRACKET:
      tk = jj_consume_token(RBRACKET);
      break;
    case STAR:
      tk = jj_consume_token(STAR);
      break;
    case DOTS:
      tk = jj_consume_token(DOTS);
      break;
    case EQ:
      tk = jj_consume_token(EQ);
      break;
    case STAR_EQ:
      tk = jj_consume_token(STAR_EQ);
      break;
    case SLASH_EQ:
      tk = jj_consume_token(SLASH_EQ);
      break;
    case PERCENT_EQ:
      tk = jj_consume_token(PERCENT_EQ);
      break;
    case PLUS_EQ:
      tk = jj_consume_token(PLUS_EQ);
      break;
    case MINUS_EQ:
      tk = jj_consume_token(MINUS_EQ);
      break;
    case SM_SM_EQ:
      tk = jj_consume_token(SM_SM_EQ);
      break;
    case GR_GR_EQ:
      tk = jj_consume_token(GR_GR_EQ);
      break;
    case AND_EQ:
      tk = jj_consume_token(AND_EQ);
      break;
    case OVER_EQ:
      tk = jj_consume_token(OVER_EQ);
      break;
    case OR_EQ:
      tk = jj_consume_token(OR_EQ);
      break;
    case HOOK:
      tk = jj_consume_token(HOOK);
      break;
    case OR_OR:
      tk = jj_consume_token(OR_OR);
      break;
    case AND_AND:
      tk = jj_consume_token(AND_AND);
      break;
    case OR:
      tk = jj_consume_token(OR);
      break;
    case AND:
      tk = jj_consume_token(AND);
      break;
    case OVER:
      tk = jj_consume_token(OVER);
      break;
    case EQ_EQ:
      tk = jj_consume_token(EQ_EQ);
      break;
    case NOT_EQ:
      tk = jj_consume_token(NOT_EQ);
      break;
    case SM:
      tk = jj_consume_token(SM);
      break;
    case GR:
      tk = jj_consume_token(GR);
      break;
    case SM_EQ:
      tk = jj_consume_token(SM_EQ);
      break;
    case GR_EQ:
      tk = jj_consume_token(GR_EQ);
      break;
    case SM_SM:
      tk = jj_consume_token(SM_SM);
      break;
    case GR_GR:
      tk = jj_consume_token(GR_GR);
      break;
    case PLUS:
      tk = jj_consume_token(PLUS);
      break;
    case MINUS:
      tk = jj_consume_token(MINUS);
      break;
    case SLASH:
      tk = jj_consume_token(SLASH);
      break;
    case PERCENT:
      tk = jj_consume_token(PERCENT);
      break;
    case PLUS_PLUS:
      tk = jj_consume_token(PLUS_PLUS);
      break;
    case MINUS_MINUS:
      tk = jj_consume_token(MINUS_MINUS);
      break;
    case COMP:
      tk = jj_consume_token(COMP);
      break;
    case NOT:
      tk = jj_consume_token(NOT);
      break;
    case DOT:
      tk = jj_consume_token(DOT);
      break;
    case ARROW:
      tk = jj_consume_token(ARROW);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return tk;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnsiCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88000000,0x88000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffffffe,0xfffffffe,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffcf,0xffffffcf,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xfffff,0xfffff,};
   }

  /** Constructor with InputStream. */
  public AnsiC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnsiC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnsiCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnsiC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnsiCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnsiC(AnsiCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnsiCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[116];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 116; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
